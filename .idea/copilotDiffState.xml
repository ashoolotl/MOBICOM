<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/mobicom/s17/mco2/CalendarActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/mobicom/s17/mco2/CalendarActivity.kt" />
              <option name="originalContent" value="package com.mobicom.s17.mco2&#10;&#10;import android.graphics.Color&#10;import android.os.Bundle&#10;import android.view.Gravity&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.GridLayout&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import java.text.SimpleDateFormat&#10;import java.util.Calendar&#10;import java.util.Locale&#10;&#10;class CalendarActivity : AppCompatActivity() {&#10;&#10;    private lateinit var dbHelper: DatabaseHelper&#10;    private lateinit var calendarGrid: GridLayout&#10;    private lateinit var headerText: TextView&#10;    private lateinit var prevButton: Button&#10;    private lateinit var nextButton: Button&#10;    private var currentMonth: Int = 0&#10;    private var currentYear: Int = 0&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.calendar)&#10;&#10;        dbHelper = DatabaseHelper(this)&#10;        calendarGrid = findViewById(R.id.prototypeCalendar)&#10;        headerText = findViewById(R.id.calendarHeader)&#10;&#10;        // Add navigation buttons programmatically&#10;        val navLayout = (headerText.parent as ViewGroup) as ViewGroup&#10;        prevButton = Button(this).apply { text = &quot;&lt;&quot; }&#10;        nextButton = Button(this).apply { text = &quot;&gt;&quot; }&#10;        navLayout.addView(prevButton, 0)&#10;        navLayout.addView(nextButton)&#10;&#10;        val cal = Calendar.getInstance()&#10;        currentMonth = cal.get(Calendar.MONTH)&#10;        currentYear = cal.get(Calendar.YEAR)&#10;&#10;        prevButton.setOnClickListener {&#10;            if (currentMonth == 0) {&#10;                currentMonth = 11&#10;                currentYear--&#10;            } else {&#10;                currentMonth--&#10;            }&#10;            updateCalendar()&#10;        }&#10;        nextButton.setOnClickListener {&#10;            if (currentMonth == 11) {&#10;                currentMonth = 0&#10;                currentYear++&#10;            } else {&#10;                currentMonth++&#10;            }&#10;            updateCalendar()&#10;        }&#10;&#10;        updateCalendar()&#10;    }&#10;&#10;    private fun updateCalendar() {&#10;        // Update header&#10;        val cal = Calendar.getInstance()&#10;        cal.set(Calendar.MONTH, currentMonth)&#10;        cal.set(Calendar.YEAR, currentYear)&#10;        val sdf = SimpleDateFormat(&quot;MMMM yyyy&quot;, Locale.getDefault())&#10;        headerText.text = sdf.format(cal.time)&#10;&#10;        // Clear previous views&#10;        calendarGrid.removeAllViews()&#10;&#10;        // Get first day of month and number of days&#10;        cal.set(Calendar.DAY_OF_MONTH, 1)&#10;        val firstDayOfWeek = cal.get(Calendar.DAY_OF_WEEK) - 1 // 0=Sun&#10;        val daysInMonth = cal.getActualMaximum(Calendar.DAY_OF_MONTH)&#10;&#10;        // Fetch moods by date&#10;        val moodsByDate = dbHelper.getMoodsByDate()&#10;        val monthStr = String.format(&quot;%02d&quot;, currentMonth + 1)&#10;        val yearStr = currentYear.toString()&#10;&#10;        // Fill grid&#10;        val totalCells = 42 // 7x6&#10;        for (i in 0 until totalCells) {&#10;            val dayNum = i - firstDayOfWeek + 1&#10;            val dayView = TextView(this)&#10;            dayView.layoutParams = ViewGroup.LayoutParams(48.dp, 48.dp)&#10;            dayView.gravity = Gravity.CENTER&#10;            dayView.textSize = 16f&#10;            dayView.setTextColor(Color.parseColor(&quot;#6E2795&quot;))&#10;            dayView.setBackgroundResource(R.drawable.bg_day_cell)&#10;            if (dayNum in 1..daysInMonth) {&#10;                dayView.text = dayNum.toString()&#10;                val dateKey = &quot;$monthStr/$dayNum/$yearStr&quot;&#10;                when (moodsByDate[dateKey]) {&#10;                    &quot;happy&quot; -&gt; dayView.setBackgroundColor(Color.parseColor(&quot;#FFD700&quot;))&#10;                    &quot;sad&quot; -&gt; dayView.setBackgroundColor(Color.parseColor(&quot;#1E90FF&quot;))&#10;                    &quot;angry&quot; -&gt; dayView.setBackgroundColor(Color.parseColor(&quot;#FF4500&quot;))&#10;                    &quot;calm&quot; -&gt; dayView.setBackgroundColor(Color.parseColor(&quot;#90EE90&quot;))&#10;                    else -&gt; dayView.setBackgroundColor(Color.parseColor(&quot;#D3D3D3&quot;))&#10;                }&#10;            } else {&#10;                dayView.text = &quot;&quot;&#10;                dayView.setBackgroundColor(Color.TRANSPARENT)&#10;            }&#10;            calendarGrid.addView(dayView)&#10;        }&#10;    }&#10;&#10;    // Extension property for dp to px&#10;    private val Int.dp: Int get() = (this * resources.displayMetrics.density).toInt()&#10;}&#10;" />
              <option name="updatedContent" value="package com.mobicom.s17.mco2&#10;&#10;import android.graphics.Color&#10;import android.os.Bundle&#10;import android.view.Gravity&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.GridLayout&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import java.text.SimpleDateFormat&#10;import java.util.Calendar&#10;import java.util.Locale&#10;&#10;class CalendarActivity : AppCompatActivity() {&#10;&#10;    private lateinit var dbHelper: DatabaseHelper&#10;    private lateinit var calendarGrid: GridLayout&#10;    private lateinit var headerText: TextView&#10;    private lateinit var prevButton: Button&#10;    private lateinit var nextButton: Button&#10;    private var currentMonth: Int = 0&#10;    private var currentYear: Int = 0&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.calendar)&#10;&#10;        dbHelper = DatabaseHelper(this)&#10;        calendarGrid = findViewById(R.id.prototypeCalendar)&#10;        headerText = findViewById(R.id.calendarHeader)&#10;&#10;        // Add navigation buttons programmatically&#10;        val navLayout = (headerText.parent as ViewGroup) as ViewGroup&#10;        prevButton = Button(this).apply { text = &quot;&lt;&quot; }&#10;        nextButton = Button(this).apply { text = &quot;&gt;&quot; }&#10;        navLayout.addView(prevButton, 0)&#10;        navLayout.addView(nextButton)&#10;&#10;        val cal = Calendar.getInstance()&#10;        currentMonth = cal.get(Calendar.MONTH)&#10;        currentYear = cal.get(Calendar.YEAR)&#10;&#10;        prevButton.setOnClickListener {&#10;            if (currentMonth == 0) {&#10;                currentMonth = 11&#10;                currentYear--&#10;            } else {&#10;                currentMonth--&#10;            }&#10;            updateCalendar()&#10;        }&#10;        nextButton.setOnClickListener {&#10;            if (currentMonth == 11) {&#10;                currentMonth = 0&#10;                currentYear++&#10;            } else {&#10;                currentMonth++&#10;            }&#10;            updateCalendar()&#10;        }&#10;&#10;        updateCalendar()&#10;    }&#10;&#10;    private fun updateCalendar() {&#10;        // Update header&#10;        val cal = Calendar.getInstance()&#10;        cal.set(Calendar.MONTH, currentMonth)&#10;        cal.set(Calendar.YEAR, currentYear)&#10;        val sdf = SimpleDateFormat(&quot;MMMM yyyy&quot;, Locale.getDefault())&#10;        headerText.text = sdf.format(cal.time)&#10;&#10;        // Clear previous views&#10;        calendarGrid.removeAllViews()&#10;&#10;        // Get first day of month and number of days&#10;        cal.set(Calendar.DAY_OF_MONTH, 1)&#10;        val firstDayOfWeek = cal.get(Calendar.DAY_OF_WEEK) - 1 // 0=Sun&#10;        val daysInMonth = cal.getActualMaximum(Calendar.DAY_OF_MONTH)&#10;&#10;        // Fetch moods by date&#10;        val moodsByDate = dbHelper.getMoodsByDate()&#10;        val monthStr = String.format(&quot;%02d&quot;, currentMonth + 1)&#10;        val yearStr = currentYear.toString()&#10;&#10;        // Fill grid&#10;        val totalCells = 42 // 7x6&#10;        for (i in 0 until totalCells) {&#10;            val dayNum = i - firstDayOfWeek + 1&#10;            val dayView = TextView(this)&#10;&#10;            // Use GridLayout.LayoutParams to properly distribute cells&#10;            val layoutParams = GridLayout.LayoutParams()&#10;            layoutParams.width = 0&#10;            layoutParams.height = 48.dp&#10;            layoutParams.columnSpec = GridLayout.spec(GridLayout.UNDEFINED, 1f)&#10;            dayView.layoutParams = layoutParams&#10;&#10;            dayView.gravity = Gravity.CENTER&#10;            dayView.textSize = 16f&#10;            dayView.setTextColor(Color.parseColor(&quot;#6E2795&quot;))&#10;            dayView.setBackgroundResource(R.drawable.bg_day_cell)&#10;&#10;            if (dayNum in 1..daysInMonth) {&#10;                dayView.text = dayNum.toString()&#10;                val dateKey = &quot;$monthStr/${String.format(&quot;%02d&quot;, dayNum)}/$yearStr&quot;&#10;                when (moodsByDate[dateKey]) {&#10;                    &quot;happy&quot; -&gt; dayView.setBackgroundColor(Color.parseColor(&quot;#FFD700&quot;))&#10;                    &quot;sad&quot; -&gt; dayView.setBackgroundColor(Color.parseColor(&quot;#1E90FF&quot;))&#10;                    &quot;angry&quot; -&gt; dayView.setBackgroundColor(Color.parseColor(&quot;#FF4500&quot;))&#10;                    &quot;calm&quot; -&gt; dayView.setBackgroundColor(Color.parseColor(&quot;#90EE90&quot;))&#10;                    else -&gt; dayView.setBackgroundColor(Color.parseColor(&quot;#D3D3D3&quot;))&#10;                }&#10;            } else {&#10;                dayView.text = &quot;&quot;&#10;                dayView.setBackgroundColor(Color.TRANSPARENT)&#10;            }&#10;            calendarGrid.addView(dayView)&#10;        }&#10;    }&#10;&#10;    // Extension property for dp to px&#10;    private val Int.dp: Int get() = (this * resources.displayMetrics.density).toInt()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/mobicom/s17/mco2/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/mobicom/s17/mco2/MainActivity.kt" />
              <option name="originalContent" value="package com.mobicom.s17.mco2&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.Gravity&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.FrameLayout&#10;import android.widget.ImageButton&#10;import android.widget.LinearLayout&#10;import android.widget.GridLayout&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import android.app.DatePickerDialog&#10;import android.widget.EditText&#10;import android.widget.Toast&#10;import android.graphics.Color&#10;import java.text.SimpleDateFormat&#10;import java.util.Calendar&#10;import java.util.Locale&#10;&#10;class MainActivity : AppCompatActivity() {&#10;&#10;    private lateinit var frame: FrameLayout&#10;    private lateinit var inflater: LayoutInflater&#10;    private var currentUserEmail: String? = null  // Track the logged-in user&#10;&#10;    // Calendar-related variables&#10;    private lateinit var dbHelper: DatabaseHelper&#10;    private lateinit var calendarGrid: GridLayout&#10;    private lateinit var headerText: TextView&#10;    private lateinit var prevButton: Button&#10;    private lateinit var nextButton: Button&#10;    private var currentMonth: Int = 0&#10;    private var currentYear: Int = 0&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_main)&#10;&#10;        frame = findViewById(R.id.main_content_frame)&#10;        inflater = LayoutInflater.from(this)&#10;        dbHelper = DatabaseHelper(this)&#10;&#10;        val btnCalendar: ImageButton = findViewById(R.id.btn_calendar)&#10;        val btnSummary: ImageButton = findViewById(R.id.btn_summary)&#10;        val btnTimeline: ImageButton = findViewById(R.id.btn_timeline)&#10;        val btnLogin: ImageButton = findViewById(R.id.btn_login)&#10;        val btnPost: ImageButton = findViewById(R.id.btn_post)&#10;&#10;        // Load startup page as default&#10;        switchPage(R.layout.activity_login)&#10;&#10;        btnPost.setOnClickListener {&#10;            switchPage(R.layout.activity_enter_text)&#10;        }&#10;&#10;        // Switch to calendar view in the main frame&#10;        btnCalendar.setOnClickListener {&#10;            switchPage(R.layout.calendar)&#10;        }&#10;&#10;        btnSummary.setOnClickListener {&#10;            switchPage(R.layout.summary)&#10;        }&#10;&#10;        btnTimeline.setOnClickListener {&#10;            switchPage(R.layout.timeline)&#10;        }&#10;&#10;        btnLogin.setOnClickListener {&#10;            // If logged in, go to profile, else show login page&#10;            if (currentUserEmail != null) {&#10;                switchPage(R.layout.profile)&#10;            } else {&#10;                switchPage(R.layout.activity_login)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun switchPage(layoutResId: Int) {&#10;        frame.removeAllViews()&#10;        val view = inflater.inflate(layoutResId, frame, false)&#10;        frame.addView(view)&#10;&#10;        val dbHelper = DatabaseHelper(this)&#10;&#10;        // Login/Register page&#10;        if (layoutResId == R.layout.activity_login) {&#10;            val loginLayout = view.findViewById&lt;LinearLayout&gt;(R.id.loginLayout)&#10;            val registerLayout = view.findViewById&lt;LinearLayout&gt;(R.id.registerLayout)&#10;&#10;            val btnLogin = view.findViewById&lt;Button&gt;(R.id.submitLoginButton)&#10;            val btnShowRegister = view.findViewById&lt;Button&gt;(R.id.btnShowRegister)&#10;            val btnRegister = view.findViewById&lt;Button&gt;(R.id.registerButton)&#10;            val btnBackToLogin = view.findViewById&lt;Button&gt;(R.id.btnBackToLogin)&#10;&#10;            // Birthday date picker&#10;            val birthdayInput = view.findViewById&lt;EditText&gt;(R.id.regBirthdayInput)&#10;            birthdayInput.setOnClickListener {&#10;                val calendar = Calendar.getInstance()&#10;                val year = calendar.get(Calendar.YEAR)&#10;                val month = calendar.get(Calendar.MONTH)&#10;                val day = calendar.get(Calendar.DAY_OF_MONTH)&#10;&#10;                val datePicker = DatePickerDialog(this, { _, y, m, d -&gt;&#10;                    val formattedDate = &quot;${m + 1}/$d/$y&quot;&#10;                    birthdayInput.setText(formattedDate)&#10;                }, year, month, day)&#10;                datePicker.datePicker.maxDate = System.currentTimeMillis()&#10;                datePicker.show()&#10;            }&#10;&#10;            btnShowRegister.setOnClickListener {&#10;                loginLayout.visibility = View.GONE&#10;                registerLayout.visibility = View.VISIBLE&#10;            }&#10;&#10;            btnBackToLogin.setOnClickListener {&#10;                registerLayout.visibility = View.GONE&#10;                loginLayout.visibility = View.VISIBLE&#10;            }&#10;&#10;            btnRegister.setOnClickListener {&#10;                val name = view.findViewById&lt;EditText&gt;(R.id.regNameInput).text.toString()&#10;                val birthday = view.findViewById&lt;EditText&gt;(R.id.regBirthdayInput).text.toString()&#10;                val email = view.findViewById&lt;EditText&gt;(R.id.regEmailInput).text.toString()&#10;                val password = view.findViewById&lt;EditText&gt;(R.id.regPasswordInput).text.toString()&#10;&#10;                if (dbHelper.insertUser(name, birthday, email, password)) {&#10;                    currentUserEmail = email&#10;                    switchPage(R.layout.timeline)&#10;                } else {&#10;                    Toast.makeText(this, &quot;Error: Email already exists!&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;&#10;            btnLogin.setOnClickListener {&#10;                val email = view.findViewById&lt;EditText&gt;(R.id.loginEmailInput).text.toString()&#10;                val password = view.findViewById&lt;EditText&gt;(R.id.loginPasswordInput).text.toString()&#10;&#10;                if (dbHelper.authenticateUser(email, password)) {&#10;                    currentUserEmail = email&#10;                    switchPage(R.layout.timeline)&#10;                } else {&#10;                    Toast.makeText(this, &quot;Invalid login credentials!&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;        }&#10;&#10;        // Profile page&#10;        if (layoutResId == R.layout.profile &amp;&amp; currentUserEmail != null) {&#10;            val nameField = view.findViewById&lt;EditText&gt;(R.id.profileName)&#10;            val birthdayField = view.findViewById&lt;EditText&gt;(R.id.profileBirthday)&#10;            val ageField = view.findViewById&lt;EditText&gt;(R.id.profileAge)&#10;            val emailField = view.findViewById&lt;EditText&gt;(R.id.profileEmail)&#10;            val btnEditProfile = view.findViewById&lt;Button&gt;(R.id.btnEditProfile)&#10;            val btnCancelEdit = view.findViewById&lt;Button&gt;(R.id.btnCancelEdit)&#10;&#10;            // Load user data&#10;            val user = dbHelper.getUserByEmail(currentUserEmail!!)&#10;            if (user != null) {&#10;                nameField.setText(user.name)&#10;                birthdayField.setText(user.birthday)&#10;                emailField.setText(user.email)&#10;&#10;                val age = dbHelper.calculateAge(user.birthday)&#10;                ageField.setText(age.toString())&#10;            }&#10;&#10;            // Birthday DatePicker when editing&#10;            birthdayField.setOnClickListener {&#10;                if (birthdayField.isEnabled) {&#10;                    val calendar = Calendar.getInstance()&#10;                    val year = calendar.get(Calendar.YEAR)&#10;                    val month = calendar.get(Calendar.MONTH)&#10;                    val day = calendar.get(Calendar.DAY_OF_MONTH)&#10;&#10;                    val datePicker = DatePickerDialog(this, { _, y, m, d -&gt;&#10;                        val formattedDate = &quot;${m + 1}/$d/$y&quot;&#10;                        birthdayField.setText(formattedDate)&#10;                        ageField.setText(dbHelper.calculateAge(formattedDate).toString())&#10;                    }, year, month, day)&#10;                    datePicker.datePicker.maxDate = System.currentTimeMillis()&#10;                    datePicker.show()&#10;                }&#10;            }&#10;&#10;            // Edit/Save functionality&#10;            btnEditProfile.setOnClickListener {&#10;                if (btnEditProfile.text == &quot;Edit Profile&quot;) {&#10;                    // Enable editing&#10;                    nameField.isEnabled = true&#10;                    birthdayField.isEnabled = true&#10;                    emailField.isEnabled = false // Email stays locked&#10;                    btnEditProfile.text = &quot;Save&quot;&#10;                    btnCancelEdit.visibility = View.VISIBLE&#10;                } else {&#10;                    // Save changes&#10;                    val updatedName = nameField.text.toString()&#10;                    val updatedBirthday = birthdayField.text.toString()&#10;&#10;                    if (dbHelper.updateUser(updatedName, updatedBirthday, currentUserEmail!!)) {&#10;                        Toast.makeText(this, &quot;Profile updated!&quot;, Toast.LENGTH_SHORT).show()&#10;&#10;                        nameField.isEnabled = false&#10;                        birthdayField.isEnabled = false&#10;                        btnEditProfile.text = &quot;Edit Profile&quot;&#10;                        btnCancelEdit.visibility = View.GONE&#10;                    } else {&#10;                        Toast.makeText(this, &quot;Failed to update profile!&quot;, Toast.LENGTH_SHORT).show()&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Cancel button&#10;            btnCancelEdit.setOnClickListener {&#10;                if (user != null) {&#10;                    nameField.setText(user.name)&#10;                    birthdayField.setText(user.birthday)&#10;                    val age = dbHelper.calculateAge(user.birthday)&#10;                    ageField.setText(age.toString())&#10;                }&#10;&#10;                nameField.isEnabled = false&#10;                birthdayField.isEnabled = false&#10;                btnEditProfile.text = &quot;Edit Profile&quot;&#10;                btnCancelEdit.visibility = View.GONE&#10;            }&#10;        }&#10;&#10;        // Calendar page&#10;        if (layoutResId == R.layout.calendar) {&#10;            calendarGrid = view.findViewById(R.id.prototypeCalendar)&#10;            headerText = view.findViewById(R.id.calendarHeader)&#10;            prevButton = view.findViewById(R.id.btn_prev_month)&#10;            nextButton = view.findViewById(R.id.btn_next_month)&#10;&#10;            // Initialize calendar to current month&#10;            val cal = Calendar.getInstance()&#10;            currentMonth = cal.get(Calendar.MONTH)&#10;            currentYear = cal.get(Calendar.YEAR)&#10;&#10;            // Set up navigation buttons&#10;            prevButton.setOnClickListener {&#10;                if (currentMonth == 0) {&#10;                    currentMonth = 11&#10;                    currentYear--&#10;                } else {&#10;                    currentMonth--&#10;                }&#10;                updateCalendar()&#10;            }&#10;&#10;            nextButton.setOnClickListener {&#10;                if (currentMonth == 11) {&#10;                    currentMonth = 0&#10;                    currentYear++&#10;                } else {&#10;                    currentMonth++&#10;                }&#10;                updateCalendar()&#10;            }&#10;&#10;            updateCalendar()&#10;        }&#10;    }&#10;&#10;    private fun updateCalendar() {&#10;        // Update header&#10;        val cal = Calendar.getInstance()&#10;        cal.set(Calendar.MONTH, currentMonth)&#10;        cal.set(Calendar.YEAR, currentYear)&#10;        val sdf = SimpleDateFormat(&quot;MMMM yyyy&quot;, Locale.getDefault())&#10;        headerText.text = sdf.format(cal.time)&#10;&#10;        // Clear previous views&#10;        calendarGrid.removeAllViews()&#10;&#10;        // Get first day of month and number of days&#10;        cal.set(Calendar.DAY_OF_MONTH, 1)&#10;        val firstDayOfWeek = cal.get(Calendar.DAY_OF_WEEK) - 1 // 0=Sun&#10;        val daysInMonth = cal.getActualMaximum(Calendar.DAY_OF_MONTH)&#10;&#10;        // Fetch moods by date&#10;        val moodsByDate = dbHelper.getMoodsByDate()&#10;        val monthStr = String.format(&quot;%02d&quot;, currentMonth + 1)&#10;        val yearStr = currentYear.toString()&#10;&#10;        // Fill grid&#10;        val totalCells = 42 // 7x6&#10;        for (i in 0 until totalCells) {&#10;            val dayNum = i - firstDayOfWeek + 1&#10;            val dayView = TextView(this)&#10;&#10;            // Use GridLayout.LayoutParams to properly distribute cells&#10;            val layoutParams = GridLayout.LayoutParams()&#10;            layoutParams.width = 0&#10;            layoutParams.height = 48.dp&#10;            layoutParams.columnSpec = GridLayout.spec(GridLayout.UNDEFINED, 1f)&#10;            dayView.layoutParams = layoutParams&#10;&#10;            dayView.gravity = Gravity.CENTER&#10;            dayView.textSize = 16f&#10;            dayView.setTextColor(Color.parseColor(&quot;#6E2795&quot;))&#10;&#10;            if (dayNum in 1..daysInMonth) {&#10;                dayView.text = dayNum.toString()&#10;                val dateKey = &quot;$monthStr/${String.format(&quot;%02d&quot;, dayNum)}/$yearStr&quot;&#10;                when (moodsByDate[dateKey]) {&#10;                    &quot;happy&quot; -&gt; dayView.setBackgroundColor(Color.parseColor(&quot;#FFD700&quot;))&#10;                    &quot;sad&quot; -&gt; dayView.setBackgroundColor(Color.parseColor(&quot;#1E90FF&quot;))&#10;                    &quot;angry&quot; -&gt; dayView.setBackgroundColor(Color.parseColor(&quot;#FF4500&quot;))&#10;                    &quot;calm&quot; -&gt; dayView.setBackgroundColor(Color.parseColor(&quot;#90EE90&quot;))&#10;                    else -&gt; dayView.setBackgroundColor(Color.parseColor(&quot;#F0F0F0&quot;))&#10;                }&#10;            } else {&#10;                dayView.text = &quot;&quot;&#10;                dayView.setBackgroundColor(Color.TRANSPARENT)&#10;            }&#10;            calendarGrid.addView(dayView)&#10;        }&#10;    }&#10;&#10;    // Extension property for dp to px&#10;    private val Int.dp: Int get() = (this * resources.displayMetrics.density).toInt()&#10;}&#10;" />
              <option name="updatedContent" value="package com.mobicom.s17.mco2&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.Gravity&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.FrameLayout&#10;import android.widget.ImageButton&#10;import android.widget.LinearLayout&#10;import android.widget.GridLayout&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import android.app.DatePickerDialog&#10;import android.widget.EditText&#10;import android.widget.Toast&#10;import android.graphics.Color&#10;import java.text.SimpleDateFormat&#10;import java.util.Calendar&#10;import java.util.Locale&#10;&#10;class MainActivity : AppCompatActivity() {&#10;&#10;    private lateinit var frame: FrameLayout&#10;    private lateinit var inflater: LayoutInflater&#10;    private var currentUserEmail: String? = null  // Track the logged-in user&#10;&#10;    // Calendar-related variables&#10;    private lateinit var dbHelper: DatabaseHelper&#10;    private lateinit var calendarGrid: GridLayout&#10;    private lateinit var headerText: TextView&#10;    private lateinit var prevButton: Button&#10;    private lateinit var nextButton: Button&#10;    private var currentMonth: Int = 0&#10;    private var currentYear: Int = 0&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_main)&#10;&#10;        frame = findViewById(R.id.main_content_frame)&#10;        inflater = LayoutInflater.from(this)&#10;        dbHelper = DatabaseHelper(this)&#10;&#10;        val btnCalendar: ImageButton = findViewById(R.id.btn_calendar)&#10;        val btnSummary: ImageButton = findViewById(R.id.btn_summary)&#10;        val btnTimeline: ImageButton = findViewById(R.id.btn_timeline)&#10;        val btnLogin: ImageButton = findViewById(R.id.btn_login)&#10;        val btnPost: ImageButton = findViewById(R.id.btn_post)&#10;&#10;        // Load startup page as default&#10;        switchPage(R.layout.activity_login)&#10;&#10;        btnPost.setOnClickListener {&#10;            switchPage(R.layout.activity_enter_text)&#10;        }&#10;&#10;        // Switch to calendar view in the main frame&#10;        btnCalendar.setOnClickListener {&#10;            switchPage(R.layout.calendar)&#10;        }&#10;&#10;        btnSummary.setOnClickListener {&#10;            switchPage(R.layout.summary)&#10;        }&#10;&#10;        btnTimeline.setOnClickListener {&#10;            switchPage(R.layout.timeline)&#10;        }&#10;&#10;        btnLogin.setOnClickListener {&#10;            // If logged in, go to profile, else show login page&#10;            if (currentUserEmail != null) {&#10;                switchPage(R.layout.profile)&#10;            } else {&#10;                switchPage(R.layout.activity_login)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun switchPage(layoutResId: Int) {&#10;        frame.removeAllViews()&#10;        val view = inflater.inflate(layoutResId, frame, false)&#10;        frame.addView(view)&#10;&#10;        val dbHelper = DatabaseHelper(this)&#10;&#10;        // Login/Register page&#10;        if (layoutResId == R.layout.activity_login) {&#10;            val loginLayout = view.findViewById&lt;LinearLayout&gt;(R.id.loginLayout)&#10;            val registerLayout = view.findViewById&lt;LinearLayout&gt;(R.id.registerLayout)&#10;&#10;            val btnLogin = view.findViewById&lt;Button&gt;(R.id.submitLoginButton)&#10;            val btnShowRegister = view.findViewById&lt;Button&gt;(R.id.btnShowRegister)&#10;            val btnRegister = view.findViewById&lt;Button&gt;(R.id.registerButton)&#10;            val btnBackToLogin = view.findViewById&lt;Button&gt;(R.id.btnBackToLogin)&#10;&#10;            // Birthday date picker&#10;            val birthdayInput = view.findViewById&lt;EditText&gt;(R.id.regBirthdayInput)&#10;            birthdayInput.setOnClickListener {&#10;                val calendar = Calendar.getInstance()&#10;                val year = calendar.get(Calendar.YEAR)&#10;                val month = calendar.get(Calendar.MONTH)&#10;                val day = calendar.get(Calendar.DAY_OF_MONTH)&#10;&#10;                val datePicker = DatePickerDialog(this, { _, y, m, d -&gt;&#10;                    val formattedDate = &quot;${m + 1}/$d/$y&quot;&#10;                    birthdayInput.setText(formattedDate)&#10;                }, year, month, day)&#10;                datePicker.datePicker.maxDate = System.currentTimeMillis()&#10;                datePicker.show()&#10;            }&#10;&#10;            btnShowRegister.setOnClickListener {&#10;                loginLayout.visibility = View.GONE&#10;                registerLayout.visibility = View.VISIBLE&#10;            }&#10;&#10;            btnBackToLogin.setOnClickListener {&#10;                registerLayout.visibility = View.GONE&#10;                loginLayout.visibility = View.VISIBLE&#10;            }&#10;&#10;            btnRegister.setOnClickListener {&#10;                val name = view.findViewById&lt;EditText&gt;(R.id.regNameInput).text.toString()&#10;                val birthday = view.findViewById&lt;EditText&gt;(R.id.regBirthdayInput).text.toString()&#10;                val email = view.findViewById&lt;EditText&gt;(R.id.regEmailInput).text.toString()&#10;                val password = view.findViewById&lt;EditText&gt;(R.id.regPasswordInput).text.toString()&#10;&#10;                if (dbHelper.insertUser(name, birthday, email, password)) {&#10;                    currentUserEmail = email&#10;                    switchPage(R.layout.timeline)&#10;                } else {&#10;                    Toast.makeText(this, &quot;Error: Email already exists!&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;&#10;            btnLogin.setOnClickListener {&#10;                val email = view.findViewById&lt;EditText&gt;(R.id.loginEmailInput).text.toString()&#10;                val password = view.findViewById&lt;EditText&gt;(R.id.loginPasswordInput).text.toString()&#10;&#10;                if (dbHelper.authenticateUser(email, password)) {&#10;                    currentUserEmail = email&#10;                    switchPage(R.layout.timeline)&#10;                } else {&#10;                    Toast.makeText(this, &quot;Invalid login credentials!&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;        }&#10;&#10;        // Profile page&#10;        if (layoutResId == R.layout.profile &amp;&amp; currentUserEmail != null) {&#10;            val nameField = view.findViewById&lt;EditText&gt;(R.id.profileName)&#10;            val birthdayField = view.findViewById&lt;EditText&gt;(R.id.profileBirthday)&#10;            val ageField = view.findViewById&lt;EditText&gt;(R.id.profileAge)&#10;            val emailField = view.findViewById&lt;EditText&gt;(R.id.profileEmail)&#10;            val btnEditProfile = view.findViewById&lt;Button&gt;(R.id.btnEditProfile)&#10;            val btnCancelEdit = view.findViewById&lt;Button&gt;(R.id.btnCancelEdit)&#10;&#10;            // Load user data&#10;            val user = dbHelper.getUserByEmail(currentUserEmail!!)&#10;            if (user != null) {&#10;                nameField.setText(user.name)&#10;                birthdayField.setText(user.birthday)&#10;                emailField.setText(user.email)&#10;&#10;                val age = dbHelper.calculateAge(user.birthday)&#10;                ageField.setText(age.toString())&#10;            }&#10;&#10;            // Birthday DatePicker when editing&#10;            birthdayField.setOnClickListener {&#10;                if (birthdayField.isEnabled) {&#10;                    val calendar = Calendar.getInstance()&#10;                    val year = calendar.get(Calendar.YEAR)&#10;                    val month = calendar.get(Calendar.MONTH)&#10;                    val day = calendar.get(Calendar.DAY_OF_MONTH)&#10;&#10;                    val datePicker = DatePickerDialog(this, { _, y, m, d -&gt;&#10;                        val formattedDate = &quot;${m + 1}/$d/$y&quot;&#10;                        birthdayField.setText(formattedDate)&#10;                        ageField.setText(dbHelper.calculateAge(formattedDate).toString())&#10;                    }, year, month, day)&#10;                    datePicker.datePicker.maxDate = System.currentTimeMillis()&#10;                    datePicker.show()&#10;                }&#10;            }&#10;&#10;            // Edit/Save functionality&#10;            btnEditProfile.setOnClickListener {&#10;                if (btnEditProfile.text == &quot;Edit Profile&quot;) {&#10;                    // Enable editing&#10;                    nameField.isEnabled = true&#10;                    birthdayField.isEnabled = true&#10;                    emailField.isEnabled = false // Email stays locked&#10;                    btnEditProfile.text = &quot;Save&quot;&#10;                    btnCancelEdit.visibility = View.VISIBLE&#10;                } else {&#10;                    // Save changes&#10;                    val updatedName = nameField.text.toString()&#10;                    val updatedBirthday = birthdayField.text.toString()&#10;&#10;                    if (dbHelper.updateUser(updatedName, updatedBirthday, currentUserEmail!!)) {&#10;                        Toast.makeText(this, &quot;Profile updated!&quot;, Toast.LENGTH_SHORT).show()&#10;&#10;                        nameField.isEnabled = false&#10;                        birthdayField.isEnabled = false&#10;                        btnEditProfile.text = &quot;Edit Profile&quot;&#10;                        btnCancelEdit.visibility = View.GONE&#10;                    } else {&#10;                        Toast.makeText(this, &quot;Failed to update profile!&quot;, Toast.LENGTH_SHORT).show()&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Cancel button&#10;            btnCancelEdit.setOnClickListener {&#10;                if (user != null) {&#10;                    nameField.setText(user.name)&#10;                    birthdayField.setText(user.birthday)&#10;                    val age = dbHelper.calculateAge(user.birthday)&#10;                    ageField.setText(age.toString())&#10;                }&#10;&#10;                nameField.isEnabled = false&#10;                birthdayField.isEnabled = false&#10;                btnEditProfile.text = &quot;Edit Profile&quot;&#10;                btnCancelEdit.visibility = View.GONE&#10;            }&#10;        }&#10;&#10;        // Calendar page&#10;        if (layoutResId == R.layout.calendar) {&#10;            calendarGrid = view.findViewById(R.id.prototypeCalendar)&#10;            headerText = view.findViewById(R.id.calendarHeader)&#10;            prevButton = view.findViewById(R.id.btn_prev_month)&#10;            nextButton = view.findViewById(R.id.btn_next_month)&#10;&#10;            // Initialize calendar to current month&#10;            val cal = Calendar.getInstance()&#10;            currentMonth = cal.get(Calendar.MONTH)&#10;            currentYear = cal.get(Calendar.YEAR)&#10;&#10;            // Set up navigation buttons&#10;            prevButton.setOnClickListener {&#10;                if (currentMonth == 0) {&#10;                    currentMonth = 11&#10;                    currentYear--&#10;                } else {&#10;                    currentMonth--&#10;                }&#10;                updateCalendar()&#10;            }&#10;&#10;            nextButton.setOnClickListener {&#10;                if (currentMonth == 11) {&#10;                    currentMonth = 0&#10;                    currentYear++&#10;                } else {&#10;                    currentMonth++&#10;                }&#10;                updateCalendar()&#10;            }&#10;&#10;            updateCalendar()&#10;        }&#10;    }&#10;&#10;    private fun updateCalendar() {&#10;        // Update header&#10;        val cal = Calendar.getInstance()&#10;        cal.set(Calendar.MONTH, currentMonth)&#10;        cal.set(Calendar.YEAR, currentYear)&#10;        val sdf = SimpleDateFormat(&quot;MMMM yyyy&quot;, Locale.getDefault())&#10;        headerText.text = sdf.format(cal.time)&#10;&#10;        // Clear previous views&#10;        calendarGrid.removeAllViews()&#10;&#10;        // Get first day of month and number of days&#10;        cal.set(Calendar.DAY_OF_MONTH, 1)&#10;        val firstDayOfWeek = cal.get(Calendar.DAY_OF_WEEK) - 1 // 0=Sun&#10;        val daysInMonth = cal.getActualMaximum(Calendar.DAY_OF_MONTH)&#10;&#10;        // Fetch moods by date&#10;        val moodsByDate = dbHelper.getMoodsByDate()&#10;        val monthStr = String.format(&quot;%02d&quot;, currentMonth + 1)&#10;        val yearStr = currentYear.toString()&#10;&#10;        // Fill grid&#10;        val totalCells = 42 // 7x6&#10;        for (i in 0 until totalCells) {&#10;            val dayNum = i - firstDayOfWeek + 1&#10;            val dayView = TextView(this)&#10;&#10;            // Use GridLayout.LayoutParams to properly distribute cells&#10;            val layoutParams = GridLayout.LayoutParams()&#10;            layoutParams.width = 0&#10;            layoutParams.height = 80.dp // Increased height to accommodate mood text&#10;            layoutParams.columnSpec = GridLayout.spec(GridLayout.UNDEFINED, 1f)&#10;            dayView.layoutParams = layoutParams&#10;&#10;            dayView.gravity = Gravity.CENTER&#10;            dayView.textSize = 12f // Smaller text to fit both day and mood&#10;            dayView.setTextColor(Color.parseColor(&quot;#6E2795&quot;))&#10;            dayView.setPadding(4, 4, 4, 4)&#10;&#10;            if (dayNum in 1..daysInMonth) {&#10;                val dateKey = &quot;$monthStr/${String.format(&quot;%02d&quot;, dayNum)}/$yearStr&quot;&#10;                val mood = moodsByDate[dateKey]&#10;                &#10;                // Set text to show both day number and mood (if any)&#10;                dayView.text = if (mood != null) {&#10;                    &quot;$dayNum\n$mood&quot;&#10;                } else {&#10;                    dayNum.toString()&#10;                }&#10;                &#10;                // Set background color based on mood&#10;                when (mood) {&#10;                    &quot;happy&quot; -&gt; dayView.setBackgroundColor(Color.parseColor(&quot;#FFD700&quot;))&#10;                    &quot;sad&quot; -&gt; dayView.setBackgroundColor(Color.parseColor(&quot;#1E90FF&quot;))&#10;                    &quot;angry&quot; -&gt; dayView.setBackgroundColor(Color.parseColor(&quot;#FF4500&quot;))&#10;                    &quot;calm&quot; -&gt; dayView.setBackgroundColor(Color.parseColor(&quot;#90EE90&quot;))&#10;                    else -&gt; dayView.setBackgroundColor(Color.parseColor(&quot;#F0F0F0&quot;))&#10;                }&#10;            } else {&#10;                dayView.text = &quot;&quot;&#10;                dayView.setBackgroundColor(Color.TRANSPARENT)&#10;            }&#10;            calendarGrid.addView(dayView)&#10;        }&#10;    }&#10;&#10;    // Extension property for dp to px&#10;    private val Int.dp: Int get() = (this * resources.displayMetrics.density).toInt()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/calendar.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/calendar.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:gravity=&quot;center_vertical&quot;&#10;    android:orientation=&quot;vertical&quot;&gt;&#10;&#10;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/calendarHeader&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;June 2025&quot;&#10;        android:textSize=&quot;24sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:textColor=&quot;#6E2795&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot;/&gt;&#10;&#10;    &lt;LinearLayout&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;horizontal&quot;&#10;    android:gravity=&quot;center&quot;&gt;&#10;&#10;    &lt;TextView android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:text=&quot;Sun&quot; android:gravity=&quot;center&quot; android:textColor=&quot;#6E2795&quot;/&gt;&#10;    &lt;TextView android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:text=&quot;Mon&quot; android:gravity=&quot;center&quot; android:textColor=&quot;#6E2795&quot;/&gt;&#10;    &lt;TextView android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:text=&quot;Tue&quot; android:gravity=&quot;center&quot; android:textColor=&quot;#6E2795&quot;/&gt;&#10;    &lt;TextView android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:text=&quot;Wed&quot; android:gravity=&quot;center&quot; android:textColor=&quot;#6E2795&quot;/&gt;&#10;    &lt;TextView android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:text=&quot;Thu&quot; android:gravity=&quot;center&quot; android:textColor=&quot;#6E2795&quot;/&gt;&#10;    &lt;TextView android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:text=&quot;Fri&quot; android:gravity=&quot;center&quot; android:textColor=&quot;#6E2795&quot;/&gt;&#10;    &lt;TextView android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:text=&quot;Sat&quot; android:gravity=&quot;center&quot; android:textColor=&quot;#6E2795&quot;/&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;GridLayout&#10;        android:id=&quot;@+id/prototypeCalendar&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:alignmentMode=&quot;alignMargins&quot;&#10;        android:columnCount=&quot;7&quot;&#10;        android:rowCount=&quot;6&quot;&#10;        android:useDefaultMargins=&quot;true&quot;&#10;        android:background=&quot;#FFFFFF&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:gravity=&quot;center_vertical&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;!-- Navigation and Header --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center_vertical&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot;&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btn_prev_month&quot;&#10;            android:layout_width=&quot;48dp&quot;&#10;            android:layout_height=&quot;48dp&quot;&#10;            android:text=&quot;&amp;lt;&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:textColor=&quot;#6E2795&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/calendarHeader&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;January 2025&quot;&#10;            android:textSize=&quot;24sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textColor=&quot;#6E2795&quot;&#10;            android:gravity=&quot;center&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btn_next_month&quot;&#10;            android:layout_width=&quot;48dp&quot;&#10;            android:layout_height=&quot;48dp&quot;&#10;            android:text=&quot;&amp;gt;&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:textColor=&quot;#6E2795&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Day Labels --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;        &lt;TextView android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:text=&quot;Sun&quot; android:gravity=&quot;center&quot; android:textColor=&quot;#6E2795&quot; android:textStyle=&quot;bold&quot;/&gt;&#10;        &lt;TextView android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:text=&quot;Mon&quot; android:gravity=&quot;center&quot; android:textColor=&quot;#6E2795&quot; android:textStyle=&quot;bold&quot;/&gt;&#10;        &lt;TextView android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:text=&quot;Tue&quot; android:gravity=&quot;center&quot; android:textColor=&quot;#6E2795&quot; android:textStyle=&quot;bold&quot;/&gt;&#10;        &lt;TextView android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:text=&quot;Wed&quot; android:gravity=&quot;center&quot; android:textColor=&quot;#6E2795&quot; android:textStyle=&quot;bold&quot;/&gt;&#10;        &lt;TextView android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:text=&quot;Thu&quot; android:gravity=&quot;center&quot; android:textColor=&quot;#6E2795&quot; android:textStyle=&quot;bold&quot;/&gt;&#10;        &lt;TextView android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:text=&quot;Fri&quot; android:gravity=&quot;center&quot; android:textColor=&quot;#6E2795&quot; android:textStyle=&quot;bold&quot;/&gt;&#10;        &lt;TextView android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:text=&quot;Sat&quot; android:gravity=&quot;center&quot; android:textColor=&quot;#6E2795&quot; android:textStyle=&quot;bold&quot;/&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Calendar Grid --&gt;&#10;    &lt;GridLayout&#10;        android:id=&quot;@+id/prototypeCalendar&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:alignmentMode=&quot;alignMargins&quot;&#10;        android:columnCount=&quot;7&quot;&#10;        android:rowCount=&quot;6&quot;&#10;        android:useDefaultMargins=&quot;true&quot;&#10;        android:background=&quot;#FFFFFF&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_calendar.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_calendar.xml" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>